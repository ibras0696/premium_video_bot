from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardButton, InlineKeyboardMarkup)

from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder


def inline_keyboard_buttons(buttons_dct: dict, starts: str='', adjust: int=2, url_btn: bool= False) -> InlineKeyboardMarkup:
    '''
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫
    :param buttons_dct: –°–ª–æ–≤–∞—Ä—å {–∫–Ω–æ–ø–∫–∞: —Å—Å—ã–ª–∫–∞ –∏–ª–∏ callback}
    :param starts: –ù–∞—á–∞–ª–æ callback
    :param adjust: –æ–±—â–∏–π —Ä—è–¥ —Å–∫–æ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ä—è–¥
    :param url_btn: –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å True –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –±—É–¥—É—Ç —Å—Å—ã–ª–∫–∏
    :return: InlineKeyboardMarkup
    '''
    try:
        if url_btn:
            kb = InlineKeyboardBuilder()
            for key, value in buttons_dct.items():
                kb.add(InlineKeyboardButton(text=key, url=value))
            return kb.adjust(adjust).as_markup()
        else:
            kb = InlineKeyboardBuilder()
            for key, value in buttons_dct.items():
                if key and value:
                    kb.add(InlineKeyboardButton(text=key, callback_data=f'{starts}{value}'))
            return kb.adjust(adjust).as_markup()
    except Exception as ex:
        raise f'–û—à–∏–±–∫–∞: {ex}'


# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
start_kb = inline_keyboard_buttons(
    buttons_dct={
        'üöÄ –ù–∞—á–∞—Ç—å': 'start'
    }
)

# –ü–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç
ref_and_course_kb = inline_keyboard_buttons(
    buttons_dct={
        'üéì –•–æ—á—É –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å!': 'course',
        'üöÄ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å' : 'profile',
        'üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞': 'ref',
    },
    adjust=1,
    starts='get_start_'
)


profile_kb = inline_keyboard_buttons(
    buttons_dct={
#        'üí∏ –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏' : 'take',     # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞
        'üîô –ù–∞–∑–∞–¥'         : 'back'     # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
    },
    adjust=1,  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    starts='profile_'  # –ü—Ä–µ—Ñ–∏–∫—Å callback-–¥–∞–Ω–Ω—ã—Ö
)

# –ö–ë –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –•–æ—á—É –ö—É—Ä—Å
course_kb = inline_keyboard_buttons(
    buttons_dct={
        'ü•â –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å': 'base',
        'ü•à –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—É—Ä—Å': 'advanced',
        'ü•á –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫—É—Ä—Å': 'exclusive',
        'üèÜ –í—Å–µ –∫—É—Ä—Å—ã —Å—Ä–∞–∑—É': 'all',
        'üîô –ù–∞–∑–∞–¥': 'back',
    },
    adjust=1,
    starts='course_'
)

# –ö–ë –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞
pay_course_kb = inline_keyboard_buttons(
    buttons_dct={
        'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å': 'pay',
        'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞': 'support',
        'üîô –ù–∞–∑–∞–¥': 'back',
    },
    adjust=1,
    starts='pay_course_'
)

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π
def refer_kb(back: bool = True, take: bool = False):
        return inline_keyboard_buttons(
        buttons_dct={
            'üí∏ –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏': 'take' if take else None,  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞
            'üîô –ù–∞–∑–∞–¥': 'back' # –ù–∞–∑–∞–¥
        },
        starts='ref_',
        adjust=1
        )

support_kb = inline_keyboard_buttons(
    buttons_dct={
        'üîô –ù–∞–∑–∞–¥': 'back',
    },
    starts='support_'
)