import traceback
import logging
from typing import Callable, Dict, Any, Awaitable

from datetime import datetime

from aiogram.types import Update
from aiogram import BaseMiddleware, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery

from config import ADMIN_IDS, grps
from database import CrudeSubscriptions, Subscriptions


class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self):
        self.group_tariffs = Subscriptions.get_group_ids()

    async def __call__(
            self,
            handler: Callable,
            event: Any,  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            data: Dict[str, Any]
    ) -> Any:
        bot: Bot = data['bot']
        chat_id = None
        user_id = None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        if isinstance(event, Message):
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            chat_id = str(event.chat.id)
            user_id = event.from_user.id

        elif isinstance(event, ChatMemberUpdated):
            # –î–ª—è —Å–æ–±—ã—Ç–∏–π –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if event.old_chat_member.status == "left" and event.new_chat_member.status == "member":
                chat_id = str(event.chat.id)
                user_id = event.new_chat_member.user.id
            else:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º
                return await handler(event, data)

        elif isinstance(event, CallbackQuery) and event.message:
            # –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –≥—Ä—É–ø–ø
            chat_id = str(event.message.chat.id)
            user_id = event.from_user.id

        else:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            return await handler(event, data)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ ID —á–∞—Ç–∞
        plan = None
        for tariff, grp_id in self.group_tariffs.items():
            if str(grp_id) == chat_id:
                plan = tariff
                break

        if not plan:
            return await handler(event, data)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await CrudeSubscriptions().check_subscription(user_id, plan)

            if not subscription or subscription.day_count <= 0:
                try:
                    # –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
                    await bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
                    logging.info(f"‚ùå {user_id} –∫–∏–∫–Ω—É—Ç –∏–∑ {chat_id}, –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {plan}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                    for admin_id in ADMIN_IDS:
                        await bot.send_message(
                            admin_id,
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}\n"
                            f"üìã –ü—Ä–∏—á–∏–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ {plan}"
                        )

                except TelegramBadRequest as e:
                    logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–∏–∫–∞ –≤ {chat_id}: {e}")

        except Exception as e:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

        return await handler(event, data)

class ErrorMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫ –≤ Aiogram 3.
    –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:
    - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å;
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É;
    - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """

    async def __call__(
        self,
        handler: Callable[[Update, dict], Awaitable[Any]],
        event: Update,
        data: dict
    ) -> Any:
        try:
            return await handler(event, data)

        except Exception as e:
            bot: Bot = data.get("bot")
            tb = traceback.format_exc()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {tb}")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º Telegram ID
            telegram_id = None
            telegram_name = None
            if event.message:
                telegram_id = event.message.from_user.id
                telegram_name = event.message.from_user.username
            elif event.callback_query:
                telegram_id = event.callback_query.from_user.id
                telegram_name = event.callback_query.from_user.username
            elif event.inline_query:
                telegram_id = event.inline_query.from_user.id
                telegram_name = event.inline_query.from_user.username

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            now = datetime.now()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_time = now.strftime("%H:%M %d.%m.%Y")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
            if bot:
                try:
                    # for tg_id in ADMIN_IDS:
                    await bot.send_message(
                        chat_id=ADMIN_IDS[1],
                        text=f"‚ùå –û—à–∏–±–∫–∞!"
                             f"\n–¢–µ–ª–µ–≥—Ä–∞–º ID: {telegram_id}"
                             f"\n–¢–µ–ª–µ–≥—Ä–∞–º –ù–∏–∫: {telegram_name}"
                             f"\n–í—Ä–µ–º—è: {formatted_time}"
                             f"\n\n<b>{type(e).__name__}:</b> {e}\n\n<pre>{tb[-700:-1]}</pre>",
                        parse_mode="HTML"
                    )
                except Exception as ex:
                    print(f'–û—à–∏–±–∫: {ex}')

'''

–û–±—ä—è—Å–Ω—è—é —Å–∏—Ç—É–∞—Ü–∏—é —è —Å–¥–µ–ª–∞–ª –ª–æ–≥–µ—Ä –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö 4 —Ç–∞—Ä–∏—Ñ–æ–≤ —Ç–æ –µ—Å—Ç—å 4—Ö –≥—Ä—É–ø–ø
–æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ—Ö –∫—Ç–æ –≤–æ—à–µ–ª –∏–ª–∏ –≤—ã—à–µ–ª
–∏ –∫–∏–∫–∞–µ—Ç —Ç–µ—Ö —É –∫–æ–≥–æ –æ–Ω–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–ª–∏ –Ω–µ—Ç
–ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫ —Ç—ã —Å–∫–∞–∑–∞–ª –Ω–∞—á–∞–ª–∏—Å—å —Å –µ–≤–µ–Ω—Ç–∞–º–∏
—è –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–¥–µ–ª–∞—é —Ç–æ —à–æ —Ç—ã —Å–∫–∞–∂–µ—à—å
–≤–æ—Ç –ª–æ–≥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–º –µ—Å—Ç—å

import logging
import traceback
from datetime import datetime
from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram.types import Update

from config import ADMIN_IDS, grps
from database import CrudeSubscriptions, Subscriptions


class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self):
        self.group_tariffs = Subscriptions.get_group_ids()

    async def __call__(
        self,
        handler: Callable,
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        message: Message = event

        chat_id = str(message.chat.id)
        telegram_id = message.from_user.id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ chat_id
        plan = None
        for tariff, grp_id in self.group_tariffs.items():
            if str(grp_id) == chat_id:
                plan = tariff
                break

        if not plan:
            return await handler(event, data)

        try:
            subscription = await CrudeSubscriptions().check_subscription(telegram_id, plan)

            if not subscription or subscription.day_count <= 0:
                try:
                    await message.bot.ban_chat_member(chat_id=chat_id, user_id=telegram_id)
                    await message.bot.unban_chat_member(chat_id=chat_id, user_id=telegram_id)
                    print(f"‚ùå {telegram_id} –∫–∏–∫–Ω—É—Ç –∏–∑ {chat_id}, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {plan}")
                except TelegramBadRequest as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

        return await handler(event, data)
'''