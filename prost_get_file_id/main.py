import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–≤ –ø—Ä–æ–¥–µ —Ö—Ä–∞–Ω–∏ –≤ .env)
TOKEN = '8174103204:AAFKSmgjdpng3sCEVd4z6PubGy9Mfn-el8s'
if not TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω!")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher()


def escape_markdown(text: str) -> str:
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è re.sub –∏ –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)


# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –∏ /help
@dp.message(Command(commands=["start", "help"]))
async def send_welcome(message: Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç {message.from_user.id}")
    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ.")


# üí¨ –≠—Ö–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo(message: Message):
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")


# üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
@dp.channel_post()
async def handle_channel_post(message: Message):
    logging.info(f"–ü–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ {message.chat.id}")

    if message.video:
        video_id = message.video.file_id
        logging.info(f"–í–∏–¥–µ–æ file_id: {video_id}")
        # escaped_id = escape_markdown(video_id)
        # await message.reply(
        #     f"üé• –ü–æ–ª—É—á–µ–Ω video file_id:\n`{escaped_id}`",
        #     parse_mode=ParseMode.MARKDOWN_V2
        # )

    elif message.photo:
        photo_id = message.photo[-1].file_id
        logging.info(f"–§–æ—Ç–æ file_id: {photo_id}")
        # escaped_id = escape_markdown(photo_id)
        # await message.reply(
        #     f"üñº –ü–æ–ª—É—á–µ–Ω photo file_id:\n`{escaped_id}`",
        #     parse_mode=ParseMode.MARKDOWN_V2
        # )

    elif message.document:
        doc_id = message.document.file_id
        logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç file_id: {doc_id}")
        # escaped_id = escape_markdown(doc_id)
        # await message.reply(
        #     f"üìÑ –ü–æ–ª—É—á–µ–Ω document file_id:\n`{escaped_id}`",
        #     parse_mode=ParseMode.MARKDOWN_V2
        # )

    else:
        await message.reply("–ü–æ—Å—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    try:
        asyncio.run(main())
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
