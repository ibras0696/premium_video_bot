from datetime import datetime, timezone

from database import CrudeUser, CrudePayments, CrudeSubscriptions


# –ó–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_crd = CrudeUser()
# –ó–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–ª–∞—Ç–µ–∂–µ–π
payments_crd = CrudePayments()
# –ó–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–¥–ø–∏—Å–æ–∫
subscriptions_crd = CrudeSubscriptions()

# –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
start_test = (
    "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
    "–≠—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞.\n"
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
)


# –¢–µ–∫—Å—Ç –ü–æ–¥–ø–∏—Å–æ–∫
async def subscription_text():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    subs = await subscriptions_crd.get_all_users_subscriptions()

    now = datetime.now(timezone.utc)

    # –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    today_subs = [sub for sub in subs if sub.registered_at.date() == now.date()]
    month_subs = [sub for sub in subs if sub.registered_at.year == now.year and sub.registered_at.month == now.month]
    year_subs = [sub for sub in subs if sub.registered_at.year == now.year]

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    all_subs = len([sub for sub in subs if sub.day_count > 0])

    # –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–ª–∞–Ω–∞–º
    plan_base_subs = len([sub for sub in subs if sub.plan == 'base'])
    plan_advanced_subs = len([sub for sub in subs if sub.plan == 'advanced'])
    plan_exclusive_subs = len([sub for sub in subs if sub.plan == 'exclusive'])
    plan_all_subs = len([sub for sub in subs if sub.plan == 'all'])

    return (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
        f"üóìÔ∏è –°–µ–≥–æ–¥–Ω—è: {len(today_subs)}\n"
        f"üìÖ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {len(month_subs)}\n"
        f"üìÜ –í —ç—Ç–æ–º –≥–æ–¥—É: {len(year_subs)}\n\n"
        f"üîµ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {all_subs}\n\n"
        "üì¶ –ü–æ —Ç–∞—Ä–∏—Ñ–∞–º:\n"
        f"   üîπ –ë–∞–∑–æ–≤—ã–π (base): {plan_base_subs}\n"
        f"   üî∏ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (advanced): {plan_advanced_subs}\n"
        f"   üõ°Ô∏è –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π (exclusive): {plan_exclusive_subs}\n"
        f"   üåê –í—Å–µ –≤ –æ–¥–Ω–æ–º (all): {plan_all_subs}"
    )

# –¢–µ–∫—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def users_text() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    users = await users_crd.get_all_users()
    now = datetime.now(timezone.utc)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
    today_users = [u for u in users if u.registered_at.date() == now.date()]
    month_users = [u for u in users if u.registered_at.year == now.year and u.registered_at.month == now.month]
    year_users = [u for u in users if u.registered_at.year == now.year]

    # –ü—Ä–æ—á–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    referral_users = [u for u in users if u.referral_id is not None]
    balance_users = [u for u in users if u.balance > 0]

    return (
        "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        f"üî¢ –í—Å–µ–≥–æ: {len(users)}\n"
        f"üóìÔ∏è –°–µ–≥–æ–¥–Ω—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {len(today_users)}\n"
        f"üìÖ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {len(month_users)}\n"
        f"üìÜ –í —ç—Ç–æ–º –≥–æ–¥—É: {len(year_users)}\n\n"
        f"üéØ –ü—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ: {len(referral_users)}\n"
        f"üí∞ –° –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: {len(balance_users)}"
    )


# –¢–µ–∫—Å—Ç –ü–ª–∞—Ç–µ–∂–µ–π
async def payments_text() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ —Ç–∞–±–ª–∏—Ü–µ –ø–ª–∞—Ç–µ–∂–µ–π.
    """
    pays = await payments_crd.get_all_payments()
    now = datetime.now(timezone.utc)

    # –°—É–º–º—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ
    today = [p for p in pays if p.registered_at.date() == now.date()]
    month = [p for p in pays if p.registered_at.year == now.year and p.registered_at.month == now.month]
    year = [p for p in pays if p.registered_at.year == now.year]

    # –ü–æ —Ç–∞—Ä–∏—Ñ–∞–º
    base = [p for p in pays if p.plan == 'base']
    advanced = [p for p in pays if p.plan == 'advanced']
    exclusive = [p for p in pays if p.plan == 'exclusive']
    all_in = [p for p in pays if p.plan == 'all']

    return (
        "üí≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
        f"üßæ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(pays)}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {sum(p.pay_sum for p in pays)} ‚ÇΩ\n\n"

        "üìä –ó–∞ –ø–µ—Ä–∏–æ–¥:\n"
        f"   üìÖ –°–µ–≥–æ–¥–Ω—è: {len(today)} –ø–ª–∞—Ç–µ–∂(–µ–π) –Ω–∞ —Å—É–º–º—É {sum(p.pay_sum for p in today)} ‚ÇΩ\n"
        f"   üóìÔ∏è –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {len(month)} –ø–ª–∞—Ç–µ–∂(–µ–π) –Ω–∞ —Å—É–º–º—É {sum(p.pay_sum for p in month)} ‚ÇΩ\n"
        f"   üìÜ –í —ç—Ç–æ–º –≥–æ–¥—É: {len(year)} –ø–ª–∞—Ç–µ–∂(–µ–π) –Ω–∞ —Å—É–º–º—É {sum(p.pay_sum for p in year)} ‚ÇΩ\n\n"

        "üì¶ –ü–æ —Ç–∞—Ä–∏—Ñ–∞–º:\n"
        f"   üîπ –ë–∞–∑–æ–≤—ã–π (base): {len(base)} –ø–ª–∞—Ç–µ–∂(–µ–π)\n"
        f"   üî∏ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (advanced): {len(advanced)} –ø–ª–∞—Ç–µ–∂(–µ–π)\n"
        f"   üõ°Ô∏è –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π (exclusive): {len(exclusive)} –ø–ª–∞—Ç–µ–∂(–µ–π)\n"
        f"   üåê –í—Å–µ –≤ –æ–¥–Ω–æ–º (all): {len(all_in)} –ø–ª–∞—Ç–µ–∂(–µ–π)"
    )
